# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish to PyPI

on:
  push:
    branches:
      - main
    paths:
      - 'README.md'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'janux-auth-gateway/**'
      - 'tests/**'

env:
  PACKAGE_NAME: "janux-auth-gateway"

jobs:
  details:
    name: Extract Version and Pre-checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      new_version: ${{ steps.extract_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract Version from pyproject.toml
        id: extract_version
        run: |
          echo "new_version=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["tool"]["poetry"]["version"])')" >> "$GITHUB_OUTPUT"
      - name: Check if Version Exists on PyPI
        id: check_pypi
        run: |
          python -c "
          import requests, sys
          from packaging.version import parse
          response = requests.get('https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json')
          if response.status_code == 404:
              latest_version = '0.0.0'
          elif response.status_code != 200:
              sys.exit(f'‚ùå Failed to fetch PyPI data: {response.status_code}')
          else:
              data = response.json()
              latest_version = data.get('info', {}).get('version', '0.0.0')
          new_version = '${{ steps.extract_version.outputs.new_version }}'
          if parse(new_version) <= parse(latest_version):
              sys.exit(f'‚ùå Version {new_version} is not newer than {latest_version}.')
          print(f'‚úÖ Version {new_version} is newer than {latest_version}.')
          "

  test_backward_compatibility:
    name: Test Backward Compatibility
    needs: [details]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: poetry-${{ runner.os }}-
      - name: Install Tox
        run: |
          pip install --upgrade pip tox
      - name: Run Tox
        run: |
          PYTHON_VERSION_NO_DOT=$(echo "${{ matrix.python-version }}" | tr -d '.')
          tox -e py${PYTHON_VERSION_NO_DOT} --result-json tox_results.json
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-py${{ matrix.python-version }}
          path: .
          retention-days: 7

  setup_and_build:
    name: Setup and Build
    needs: [details, test_backward_compatibility]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_outputs.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set Project Version
        run: poetry version ${{ needs.details.outputs.new_version }}
      - name: Install Dependencies
        run: poetry install --sync --no-interaction
      - name: Build Distribution
        run: poetry build
      - name: Validate PyPI Metadata
        run: |
          pip install twine
          twine check dist/*
      - name: Set Outputs
        id: set_outputs
        run: echo "new_version=${{ needs.details.outputs.new_version }}" >> "$GITHUB_OUTPUT"
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-v${{ needs.details.outputs.new_version }}
          path: dist/
          retention-days: 7

  pypi_publish:
    name: Publish to PyPI
    needs: [setup_and_build]
    runs-on: ubuntu-latest
    environment: release-with-approval
    permissions:
      contents: read
      id-token: write
    outputs:
      published_version: ${{ needs.setup_and_build.outputs.new_version }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-v${{ needs.setup_and_build.outputs.new_version }}
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Confirm Published Version
        run: |
          for i in {1..5}; do
            PUBLISHED_VERSION=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json | jq -r '.info.version')
            if [ "$PUBLISHED_VERSION" = "${{ needs.setup_and_build.outputs.new_version }}" ]; then
              echo "‚úÖ Version $PUBLISHED_VERSION matched!"
              exit 0
            fi
            echo "‚è≥ Waiting for PyPI to update... (Attempt $i/5)"
            sleep 5
          done
          echo "‚ùå Version mismatch!"
          exit 1

  create_tag:
    name: Create Git Tag & GitHub Release
    needs: [pypi_publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          NEW_TAG="v${{ needs.pypi_publish.outputs.published_version }}"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.pypi_publish.outputs.published_version }}"
          name: "v${{ needs.pypi_publish.outputs.published_version }}"
          body: |
            üéâ **Release v${{ needs.pypi_publish.outputs.published_version }}**
            See CHANGELOG.md for details.
