# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish to PyPI

on:
  push:
    branches:
      - main
    paths:
      - "pyproject.toml"
      - "poetry.lock"
      - "README.md"
      - "janux_auth_gateway/**"
      - "tests/**"

env:
  PACKAGE_NAME: janux-auth-gateway

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['tool']['poetry']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🧪 Check if version exists on PyPI
        run: |
          PKG=${{ env.PACKAGE_NAME }}
          VERSION=${{ steps.get_version.outputs.version }}
          if curl -sf https://pypi.org/pypi/$PKG/json | jq -e ".releases[\"$VERSION\"]"; then
            echo "❌ Version $VERSION already exists on PyPI."
            exit 1
          fi
          echo "✅ Version $VERSION is new."

  test:
    runs-on: ubuntu-latest
    needs: extract-version
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: 🧪 Run tests with tox
        run: |
          V=$(echo ${{ matrix.python-version }} | tr -d .)
          tox -e py$V

  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.set.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: 🔧 Install dependencies
        run: poetry install --no-interaction --no-root

      - name: 🏗 Build package
        run: poetry build

      - name: 📝 Set output version
        id: set
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: ⬆ Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.set.outputs.version }}
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    environment: release-with-approval
    permissions:
      id-token: write  # required for PyPI trusted publishing
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.version }}
          path: dist/

      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  tag-release:
    name: 📌 Tag & Release
    runs-on: ubuntu-latest
    needs: [publish, build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📌 Create tag
        run: |
          VERSION=${{ needs.build.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v$VERSION
          git push origin v$VERSION

      - name: 📝 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: |
            🎉 **JANUX Authentication Gateway v${{ needs.build.outputs.version }}**
            - PyPI: https://pypi.org/project/${{ env.PACKAGE_NAME }}/
            - View the full changelog in the commits or docs!
